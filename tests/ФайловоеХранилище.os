#Использовать asserts
#Использовать tempfiles
#Использовать json
#Использовать fs
#Использовать "../src/model"

// BSLLS:UnusedParameters-off
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
// BSLLS:UnusedParameters-on
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеЗапросовИнфоОбОшибкеИзФайла");
	ВсеТесты.Добавить("ТестДолжен_ЗаписатьЗапросИнфоОбОшибкеВФайл");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьЗарегистрированныеОшибки");
	ВсеТесты.Добавить("ТестДолжен_ЗаписатьЗарегистрированнуюОшибкуВФайл");

	Возврат ВсеТесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	УстановитьТекущийКаталог(ТекущийСценарий().Каталог);
	КаталогДанных = ОбъединитьПути("..", "features", "fixtures");
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	ФС.КопироватьСодержимоеКаталога(КаталогДанных, ВременныйКаталог);
	УстановитьТекущийКаталог(ВременныйКаталог);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтениеЗапросовИнфоОбОшибкеИзФайла() Экспорт

	Каталог = "data";
	ХранилищеДанных = Новый ФайловоеХранилище(Каталог);
	
	Результат = ХранилищеДанных.ПолучитьЗапросыИнфоОбОшибках();
	
	Ожидаем.Что(Результат.Колонки.Количество()).Равно(13);
	Ожидаем.Что(Результат.Количество()).Равно(3);
	
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьЗапросИнфоОбОшибкеВФайл() Экспорт
	
	Каталог = "data";
	ХранилищеДанных = Новый ФайловоеХранилище(Каталог);

	ЗапросИнфоОбОшибке = Новый Структура;
	ЗапросИнфоОбОшибке.Вставить("id", "7054dd5d-f0b8-491d-8dcc-18bc1d2cbc83");
	ЗапросИнфоОбОшибке.Вставить("datetime", "2020-10-05T21:58:45Z");
	ЗапросИнфоОбОшибке.Вставить("configHash", "bd56b503adfc454b9fc84d7b0fea3e7900000000");
	ЗапросИнфоОбОшибке.Вставить("сonfigName", "Config1");
	ЗапросИнфоОбОшибке.Вставить("configVersion", "1.0.1.265");
	ЗапросИнфоОбОшибке.Вставить("appStackHash", "5E78AD0E93E8D3963841DFD479A597ED");
	ЗапросИнфоОбОшибке.Вставить("clientStackHash", "84A1E9821497E377D0E1FB27C47CA523");
	ЗапросИнфоОбОшибке.Вставить("serverStackHash", "52FD5252518EE4116169922AB4251CC5");
	ЗапросИнфоОбОшибке.Вставить("platformType", "Windows_x86_64");
	ЗапросИнфоОбОшибке.Вставить("appName", "1CV8C");
	ЗапросИнфоОбОшибке.Вставить("appVersion", "8.3.17.1549");
	ЗапросИнфоОбОшибке.Вставить("configurationInterfaceLanguageCode", "ru");
	ЗапросИнфоОбОшибке.Вставить("systemcrash", "");
	
	ХранилищеДанных.ЗаписатьЗапросИнфоОбОшибке(ЗапросИнфоОбОшибке);
	
	ПутьКВременномуФайлу = ОбъединитьПути(Каталог, "errorInfoRequests.json");
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКВременномуФайлу, "utf-8");
	ПарсерJSON = Новый ПарсерJSON;
	ТелоЗапросаТекст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Результат = ПарсерJSON.ПрочитатьJSON(ТелоЗапросаТекст, Истина, Ложь, Истина);
	
	Ожидаем.Что(Результат.Количество()).Равно(4);
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьЗарегистрированныеОшибки() Экспорт
	
	Каталог = "data";
	ХранилищеДанных = Новый ФайловоеХранилище(Каталог);
	
	Результат = ХранилищеДанных.ПолучитьЗарегистрированныеОшибки();
	
	Ожидаем.Что(Результат.Колонки.Количество()).Равно(2);
	Ожидаем.Что(Результат.Количество()).Равно(1);
	
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьЗарегистрированнуюОшибкуВФайл() Экспорт
	
	Каталог = "data";
	ХранилищеДанных = Новый ФайловоеХранилище(Каталог);

	ИнфоОбОшибке = Новый Структура;
	ИнфоОбОшибке.Вставить("id", "7054dd5d-f0b8-491d-8dcc-18bc1d2cbc83");
	ИнфоОбОшибке.Вставить("datetime", "2020-10-05T21:58:45Z");
	
	ХранилищеДанных.ЗаписатьИнформациюОбОшибке(ИнфоОбОшибке, Неопределено);
	
	ПутьКВременномуФайлу = ОбъединитьПути(Каталог, "errors.json");
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКВременномуФайлу, "utf-8");
	ПарсерJSON = Новый ПарсерJSON;
	ТелоЗапросаТекст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Результат = ПарсерJSON.ПрочитатьJSON(ТелоЗапросаТекст, Истина, Ложь, Истина);
	
	Ожидаем.Что(Результат.Количество()).Равно(2);
	
КонецПроцедуры
